using System.Net;
using System.Text.Json;

namespace DapperWithJwtBL
{
    //public class UploadFile
    //{
    //    public IFormFile File { get; set; }
    //    public string FolderName { get; set; }
    //}
    public class JWTSettings
    {
        public required string SecretKey { get; set; }
        public required string Issuer { get; set; }
        public required string Audiance { get; set; }
    }

    public class ApiResponse
    {
        public HttpStatusCode? statusCode { get; set; }
        public bool? success { get; set; }
        public object? data { get; set; }
        public string? message { get; set; }
        public ApiResponse(string message, HttpStatusCode statusCode, bool success = true, object data = null)
        {
            this.message = message;
            this.statusCode = statusCode;
            this.success = success;
            this.data = data;
        }
        public override string ToString()
        {
            return JsonSerializer.Serialize(this);
        }
    }

    //public class Emails
    //{
    //    [Key]
    //    public int Id { get; set; }
    //    public string Subject { get; set; }
    //    public string Body { get; set; }
    //    public string Variables { get; set; }
    //    public DateTime CreatedAt { get; set; }
    //}

    //public class EmailConfig
    //{
    //    public required string Email { get; set; }
    //    public required string Password { get; set; }
    //    public required string Host { get; set; }
    //    public required int Port { get; set; }
    //}

    //public class SendMailInfo
    //{
    //    public required string To { get; set; }
    //    public required string Subject { get; set; }
    //    public required string Body { get; set; }
    //}

    //public class AutoGeneratedcode
    //{
    //    public required string Code { get; set; }
    //}

    //public class PaginatedResult<T>
    //{
    //    public List<T> Items { get; set; }
    //    public int TotalCount { get; set; }
    //    public int PageNumber { get; set; }
    //    public int PageSize { get; set; }
    //    public int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);
    //    public bool HasPreviousPage => PageNumber > 1;
    //    public bool HasNextPage => PageNumber < TotalPages;
    //}

    //public enum ContactTypes
    //{
    //    Email,
    //    Mobile,
    //    Invalid
    //}

    //public class SlugHelper
    //{
    //    public static string Slugify(string input)
    //    {
    //        if (string.IsNullOrEmpty(input)) return string.Empty;

    //        // Convert to lowercase
    //        input = input.ToLowerInvariant();

    //        // Remove special characters and replace spaces with hyphens
    //        input = Regex.Replace(input, @"[^a-z0-9\s-]", "");
    //        input = Regex.Replace(input, @"\s+", " ").Trim();
    //        input = Regex.Replace(input, @"\s", "-");

    //        return input;
    //    }

    //    // Function to deslugify a string
    //    public static string Deslugify(string input)
    //    {
    //        if (string.IsNullOrEmpty(input)) return string.Empty;

    //        // Replace hyphens with spaces
    //        input = input.Replace("-", " ");

    //        // Capitalize each word
    //        var words = input.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
    //        for (int i = 0; i < words.Length; i++)
    //        {
    //            words[i] = Char.ToUpper(words[i][0]) + words[i].Substring(1);
    //        }

    //        return string.Join(" ", words);
    //    }
    //}

    //public static class ContactValidator
    //{
    //    public static ContactTypes ContactType(string input)
    //    {
    //        if (string.IsNullOrWhiteSpace(input))
    //            return ContactTypes.Invalid;

    //        // Email regex pattern
    //        string emailPattern = @"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$";

    //        // Mobile number regex pattern (assumes a simple format of 10-15 digits, possibly starting with '+')
    //        string mobilePattern = @"^\+?\d{10,15}$";

    //        if (Regex.IsMatch(input, emailPattern))
    //            return ContactTypes.Email;
    //        else if (Regex.IsMatch(input, mobilePattern))
    //            return ContactTypes.Mobile;
    //        else
    //            return ContactTypes.Invalid;
    //    }
    //}
}
